(FPCore (a b c d e f g h i)
  :name "matrixDeterminant"
  :pre (and (<= -10 a 10) (<= -10 b 10) (<= -10 c 10)
            (<= -10 d 10) (<= -10 e 10) (<= -10 f 10)
            (<= -10 g 10) (<= -10 h 10) (<= -10 i 10))
  (- (+ (+ (* (* a e) i) (* (* b f) g)) (* (* c d) h))
     (+ (+ (* (* c e) g) (* (* b d) i)) (* (* a f) h))))

(FPCore (a b c d e f g h i)
  :name "matrixDeterminant2"
  :pre (and (<= -10 a 10) (<= -10 b 10) (<= -10 c 10)
            (<= -10 d 10) (<= -10 e 10) (<= -10 f 10)
            (<= -10 g 10) (<= -10 h 10) (<= -10 i 10))
  (- (+ (* a (* e i)) (+ (* g (* b f)) (* c (* d h))))
     (+ (* e (* c g)) (+ (* i (* b d)) (* a (* f h))))))

(FPCore (t)
  :name "intro-example-mixed"
  :description "Generated by FPTaylor";
  :precision binary32
  :pre (<= 1 t 999)
  (cast (! :precision binary64 (/ t (! :precision binary32 (+ t 1))))))

(FPCore (x1 x2 x3 x4 x5 x6)
  :name "delta4"
  :description "Generated by FPTaylor"
  :precision binary64
  :pre (and (<= 4 x1 3969/625)
            (<= 4 x2 3969/625)
            (<= 4 x3 3969/625)
            (<= 4 x4 3969/625)
            (<= 4 x5 3969/625)
            (<= 4 x6 3969/625))
  (+ (- (+ (+ (- (* (- x2) x3) (* x1 x4)) (* x2 x5)) (* x3 x6)) (* x5 x6)) (* x1 (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6))))

(FPCore (x1 x2 x3 x4 x5 x6)
  :name "delta"
  :description "Generated by FPTaylor"
  :precision binary64
  :pre (and (<= 4 x1 3969/625)
            (<= 4 x2 3969/625)
            (<= 4 x3 3969/625)
            (<= 4 x4 3969/625)
            (<= 4 x5 3969/625)
            (<= 4 x6 3969/625))
  (+ (+ (+ (+ (+ (+ (* (* x1 x4) (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6)) (* (* x2 x5) (+ (- (+ (+ (- x1 x2) x3) x4) x5) x6))) (* (* x3 x6) (- (+ (+ (- (+ x1 x2) x3) x4) x5) x6))) (* (* (- x2) x3) x4)) (* (* (- x1) x3) x5)) (* (* (- x1) x2) x6)) (* (* (- x4) x5) x6)))

(FPCore (x y)
  :name "x_by_xy"
  :description "Generated by FPTaylor"
  :precision binary32
  :pre (and (<= 1 x 4)
            (<= 1 y 4))
  (/ x (+ x y)))

(FPCore (x0 x1 x2)
  :name "sum"
  :description "Generated by FPTaylor"
  :precision binary64
  :pre (and (<= 1 x0 2)
            (<= 1 x1 2)
            (<= 1 x2 2))
  (let ([p0 (- (+ x0 x1) x2)]
        [p1 (- (+ x1 x2) x0)]
        [p2 (- (+ x2 x0) x1)])
    (+ (+ p0 p1) p2)))

(FPCore (z)
  :name "nonlin1"
  :description "Generated by FPTaylor"
  :precision binary64
  :pre (<= 0 z 999)
  (/ z (+ z 1)))

(FPCore (x y)
  :name "nonlin2"
  :description "Generated by FPTaylor"
  :precision binary64
  :pre (and (<= 1001/1000 x 2)
            (<= 1001/1000 y 2))
  (let ([t (* x y)])
    (/ (- t 1) (- (* t t) 1))))

(FPCore (x1 x2)
  :name "himmilbeau"
  :description "Generated by FPTaylor"
  :precision binary64
  :pre (and (<= -5 x1 5)
            (<= -5 x2 5))
  (let ([a (- (+ (* x1 x1) x2) 11)]
        [b (- (+ x1 (* x2 x2)) 7)])
    (+ (* a a) (* b b))))
