(FPCore (x y)
  :name "x_by_xy"
  :description "Generated by FPTaylor"
  :precision binary32
  :pre (and (<= 1 x 4)
            (<= 1 y 4))
  (/ x (+ x y)))

(FPCore (x0 x1 x2)
  :name "sum"
  :description "Generated by FPTaylor"
  :precision binary64
  :pre (and (<= 1 x0 2)
            (<= 1 x1 2)
            (<= 1 x2 2))
  (let ([p0 (- (+ x0 x1) x2)]
        [p1 (- (+ x1 x2) x0)]
        [p2 (- (+ x2 x0) x1)])
    (+ (+ p0 p1) p2)))


(FPCore (x y)
  :name "sec4-example"
  :cite (solovyev-et-al-2015)
  :precision binary64
  :pre (and (<= 1.001 x 2) (<= 1.001 y 2))
  (let ([t (* x y)])
    (/ (- t 1) (- (* t t) 1))))

(FPCore (a b)
 :name "Rump's example, from C program"
 :precision binary64
 :pre (and (<= 0 a 77617) (<= 0 b 33096))

 (let ([b2 (* b b)])
   (let ([b4 (* b2 b2)])
     (let ([b6 (* b4 b2)]
           [b8 (* b4 b4)]
           [a2 (* a a)])
       ;; 11*a2*b2 - b6 - 121*b4 - 2
       (let ([firstexpr (- (- (- (* (* 11 a2) b2) b6) (* 121 b4)) 2)])
         ;; 333.75*b6 + a2 * firstexpr + 5.5*b8 + (a/(2.0*b))
         (+ (+ (+ (* 333.75 b6) (* a2 firstexpr)) (* 5.5 b8)) (/ a (* 2 b))))))))

(FPCore (a b)
 :name "Rump's example revisited for floating point"
 :pre (and (<= 0 a 77617) (<= 0 b 33096))
 :cite (rump-revisited-2002)

 (let ([b2 (* b b)])
   (let ([b4 (* b2 b2)])
     (let ([b6 (* b4 b2)]
           [b8 (* b4 b4)]
           [a2 (* a a)])
       ;; 11*a2*b2 - 121*b4 - 2
       (let ([firstexpr (- (- (* (* 11 a2) b2) (* 121 b4)) 2)])
         ;; (333.75-a^2)*b6 + a2 * firstexpr + 5.5*b8 + (a/(2.0*b))
         (+ (+ (+ (* (- 333.75 a2) b6) (* a2 firstexpr)) (* 5.5 b8)) (/ a (* 2 b))))))))

(FPCore (x)
  :name "sqroot"
  :cite (darulova-kuncak-2014 solovyev-et-al-2015)
  :fpbench-domain mathematics
  :pre (<= 0 x 1)
  (- (+ (- (+ 1.0 (* 0.5 x)) (* (* 0.125 x) x))
        (* (* (* 0.0625 x) x) x)) (* (* (* (* 0.0390625 x) x) x) x)))
