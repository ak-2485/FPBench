(FPCore (a b c d e f g h i)
  :name "matrixDeterminant"
  :pre (and (<= -10 a 10) (<= -10 b 10) (<= -10 c 10)
            (<= -10 d 10) (<= -10 e 10) (<= -10 f 10)
            (<= -10 g 10) (<= -10 h 10) (<= -10 i 10))
  (- (+ (+ (* (* a e) i) (* (* b f) g)) (* (* c d) h))
     (+ (+ (* (* c e) g) (* (* b d) i)) (* (* a f) h))))

(FPCore (a b c d e f g h i)
  :name "matrixDeterminant2"
  :pre (and (<= -10 a 10) (<= -10 b 10) (<= -10 c 10)
            (<= -10 d 10) (<= -10 e 10) (<= -10 f 10)
            (<= -10 g 10) (<= -10 h 10) (<= -10 i 10))
  (- (+ (* a (* e i)) (+ (* g (* b f)) (* c (* d h))))
     (+ (* e (* c g)) (+ (* i (* b d)) (* a (* f h))))))

(FPCore (t)
  :name "intro-example-mixed"
  :description "Generated by FPTaylor";
  :precision binary32
  :pre (<= 1 t 999)
  (cast (! :precision binary64 (/ t (! :precision binary32 (+ t 1))))))

(FPCore (x1 x2 x3 x4 x5 x6)
  :name "delta4"
  :description "Generated by FPTaylor"
  :precision binary64
  :pre (and (<= 4 x1 3969/625)
            (<= 4 x2 3969/625)
            (<= 4 x3 3969/625)
            (<= 4 x4 3969/625)
            (<= 4 x5 3969/625)
            (<= 4 x6 3969/625))
  (+ (- (+ (+ (- (* (- x2) x3) (* x1 x4)) (* x2 x5)) (* x3 x6)) (* x5 x6)) (* x1 (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6))))

(FPCore (x1 x2 x3 x4 x5 x6)
  :name "delta"
  :description "Generated by FPTaylor"
  :precision binary64
  :pre (and (<= 4 x1 3969/625)
            (<= 4 x2 3969/625)
            (<= 4 x3 3969/625)
            (<= 4 x4 3969/625)
            (<= 4 x5 3969/625)
            (<= 4 x6 3969/625))
  (+ (+ (+ (+ (+ (+ (* (* x1 x4) (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6)) (* (* x2 x5) (+ (- (+ (+ (- x1 x2) x3) x4) x5) x6))) (* (* x3 x6) (- (+ (+ (- (+ x1 x2) x3) x4) x5) x6))) (* (* (- x2) x3) x4)) (* (* (- x1) x3) x5)) (* (* (- x1) x2) x6)) (* (* (- x4) x5) x6)))

(FPCore (x y)
  :name "x_by_xy"
  :description "Generated by FPTaylor"
  :precision binary32
  :pre (and (<= 1 x 4)
            (<= 1 y 4))
  (/ x (+ x y)))

(FPCore (x0 x1 x2)
  :name "sum"
  :description "Generated by FPTaylor"
  :precision binary64
  :pre (and (<= 1 x0 2)
            (<= 1 x1 2)
            (<= 1 x2 2))
  (let ([p0 (- (+ x0 x1) x2)]
        [p1 (- (+ x1 x2) x0)]
        [p2 (- (+ x2 x0) x1)])
    (+ (+ p0 p1) p2)))

(FPCore (z)
  :name "nonlin1"
  :description "Generated by FPTaylor"
  :precision binary64
  :pre (<= 0 z 999)
  (/ z (+ z 1)))

(FPCore (x y)
  :name "nonlin2"
  :description "Generated by FPTaylor"
  :precision binary64
  :pre (and (<= 1001/1000 x 2)
            (<= 1001/1000 y 2))
  (let ([t (* x y)])
    (/ (- t 1) (- (* t t) 1))))

(FPCore (x1 x2)
  :name "himmilbeau"
  :description "Generated by FPTaylor"
  :precision binary64
  :pre (and (<= -5 x1 5)
            (<= -5 x2 5))
  (let ([a (- (+ (* x1 x1) x2) 11)]
        [b (- (+ x1 (* x2 x2)) 7)])
    (+ (* a a) (* b b))))


(FPCore (x1 x2 x3 x4 x5 x6)
 :name "kepler0"
 :precision binary64
 :pre (and (<= 4 x1 6.36) (<= 4 x2 6.36) (<= 4 x3 6.36) (<= 4 x4 6.36) (<= 4 x5 6.36) (<= 4 x6 6.36))
 (+ (- (- (+ (* x2 x5) (* x3 x6)) (* x2 x3)) (* x5 x6))
    (* x1 (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6))))

(FPCore (x1 x2 x3 x4)
 :name "kepler1"
 :precision binary64
 :pre (and (<= 4 x1 6.36) (<= 4 x2 6.36) (<= 4 x3 6.36) (<= 4 x4 6.36))
 (- (- (- (- (+ (+ (* (* x1 x4) (- (+ (+ (- x1) x2) x3) x4))
                   (* x2 (+ (+ (- x1 x2) x3) x4)))
                (* x3 (+ (- (+ x1 x2) x3) x4)))
             (* (* x2 x3) x4))
          (* x1 x3))
       (* x1 x2))
    x4))

(FPCore (x1 x2 x3 x4 x5 x6)
 :name "kepler2"
 :precision binary64
 :pre (and (<= 4 x1 6.36) (<= 4 x2 6.36) (<= 4 x3 6.36)
           (<= 4 x4 6.36) (<= 4 x5 6.36) (<= 4 x6 6.36))
 (- (- (- (- (+ (+ (* (* x1 x4) (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6))
                   (* (* x2 x5) (+ (- (+ (+ (- x1 x2) x3) x4) x5) x6)))
                (* (* x3 x6) (- (+ (+ (- (+ x1 x2) x3) x4) x5) x6)))
             (* (* x2 x3) x4))
          (* (* x1 x3) x5))
       (* (* x1 x2) x6))
    (* (* x4 x5) x6)))


(FPCore (t)
  :name "intro-example"
  :cite (solovyev-et-al-2015)
  :pre (<= 0 t 999)
  (/ t (+ t 1)))

(FPCore (x y)
  :name "sec4-example"
  :cite (solovyev-et-al-2015)
  :precision binary64
  :pre (and (<= 1.001 x 2) (<= 1.001 y 2))
  (let ([t (* x y)])
    (/ (- t 1) (- (* t t) 1))))

(FPCore (a b)
 :name "Rump's example, from C program"
 :precision binary64
 :pre (and (<= 0 a 77617) (<= 0 b 33096))

 (let ([b2 (* b b)])
   (let ([b4 (* b2 b2)])
     (let ([b6 (* b4 b2)]
           [b8 (* b4 b4)]
           [a2 (* a a)])
       ;; 11*a2*b2 - b6 - 121*b4 - 2
       (let ([firstexpr (- (- (- (* (* 11 a2) b2) b6) (* 121 b4)) 2)])
         ;; 333.75*b6 + a2 * firstexpr + 5.5*b8 + (a/(2.0*b))
         (+ (+ (+ (* 333.75 b6) (* a2 firstexpr)) (* 5.5 b8)) (/ a (* 2 b))))))))

(FPCore (a b)
 :name "Rump's example revisited for floating point"
 :pre (and (<= 0 a 77617) (<= 0 b 33096))
 :cite (rump-revisited-2002)

 (let ([b2 (* b b)])
   (let ([b4 (* b2 b2)])
     (let ([b6 (* b4 b2)]
           [b8 (* b4 b4)]
           [a2 (* a a)])
       ;; 11*a2*b2 - 121*b4 - 2
       (let ([firstexpr (- (- (* (* 11 a2) b2) (* 121 b4)) 2)])
         ;; (333.75-a^2)*b6 + a2 * firstexpr + 5.5*b8 + (a/(2.0*b))
         (+ (+ (+ (* (- 333.75 a2) b6) (* a2 firstexpr)) (* 5.5 b8)) (/ a (* 2 b))))))))


(FPCore (u v T)
  :name "doppler1"
  :cite (darulova-kuncak-2014)
  :fpbench-domain science
  :precision binary64
  :pre (and (<= -100 u 100) (<= 20 v 20000) (<= -30 T 50))
  :rosa-ensuring 1e-12
  (let ([t1 (+ 331.4 (* 0.6 T))])
    (/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))))

(FPCore (u v T)
  :name "doppler2"
  :cite (darulova-kuncak-2014)
  :fpbench-domain science
  :precision binary64
  :pre (and (<= -125 u 125) (<= 15 v 25000) (<= -40 T 60))
  (let ([t1 (+ 331.4 (* 0.6 T))])
    (/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))))

(FPCore (u v T)
  :name "doppler3"
  :cite (darulova-kuncak-2014)
  :fpbench-domain science
  :precision binary64
  :pre (and (<= -30 u 120) (<= 320 v 20300) (<= -50 T 30))
  (let ([t1 (+ 331.4 (* 0.6 T))])
    (/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))))

(FPCore (x1 x2 x3)
  :name "rigidBody1"
  :cite (darulova-kuncak-2014 solovyev-et-al-2015)
  :fpbench-domain science
  :precision binary64
  :pre (and (<= -15 x1 15) (<= -15 x2 15) (<= -15 x3 15))
  (- (- (- (- (* x1 x2)) (* (* 2 x2) x3)) x1) x3))

(FPCore (x1 x2 x3)
  :name "rigidBody2"
  :cite (darulova-kuncak-2014 solovyev-et-al-2015)
  :fpbench-domain science
  :precision binary64
  :pre (and (<= -15 x1 15) (<= -15 x2 15) (<= -15 x3 15))
  (- (+ (- (+ (* (* (* 2 x1) x2) x3) (* (* 3 x3) x3))
           (* (* (* x2 x1) x2) x3)) (* (* 3 x3) x3))
     x2))

(FPCore (x1 x2)
  :name "jetEngine"
  :cite (darulova-kuncak-2014 solovyev-et-al-2015)
  :fpbench-domain controls
  :precision binary64
  :pre (and (<= -5 x1 5) (<= -20 x2 5))
  (let ([t (- (+ (* (* 3 x1) x1) (* 2 x2)) x1)]
        [t* (- (- (* (* 3 x1) x1) (* 2 x2)) x1)]
        [d (+ (* x1 x1) 1)])
    (let ([s (/ t d)] [s* (/ t* d)])
      (+ x1
         (+
          (+
           (+
            (+
             (* (+ (* (* (* 2 x1) s) (- s 3)) (* (* x1 x1) (- (* 4 s) 6))) d)
             (* (* (* 3 x1) x1) s))
            (* (* x1 x1) x1))
           x1)
          (* 3 s*))))))

(FPCore (v w r)
  :name "turbine1"
  :cite (darulova-kuncak-2014 solovyev-et-al-2015)
  :fpbench-domain controls
  :precision binary64
  :pre (and (<= -4.5 v -0.3) (<= 0.4 w 0.9) (<= 3.8 r 7.8))
  (- (- (+ 3 (/ 2 (* r r))) (/ (* (* 0.125 (- 3 (* 2 v))) (* (* (* w w) r) r)) (- 1 v))) 4.5))

(FPCore (v w r)
  :name "turbine2"
  :cite (darulova-kuncak-2014 solovyev-et-al-2015)
  :fpbench-domain controls
  :precision binary64
  :pre (and (<= -4.5 v -0.3) (<= 0.4 w 0.9) (<= 3.8 r 7.8))
  (- (- (* 6 v) (/ (* (* 0.5 v) (* (* (* w w) r) r)) (- 1 v))) 2.5))

(FPCore (v w r)
  :name "turbine3"
  :cite (darulova-kuncak-2014 solovyev-et-al-2015)
  :fpbench-domain controls
  :precision binary64
  :pre (and (<= -4.5 v -0.3) (<= 0.4 w 0.9) (<= 3.8 r 7.8))
  (- (- (- 3 (/ 2 (* r r)))
        (/ (* (* 0.125 (+ 1 (* 2 v))) (* (* (* w w) r) r)) (- 1 v)))
     0.5))

(FPCore (x)
  :name "verhulst"
  :cite (darulova-kuncak-2014 solovyev-et-al-2015)
  :fpbench-domain science
  :precision binary64
  :pre (<= 0.1 x 0.3)
  (let ([r 4.0] [K 1.11])
    (/ (* r x) (+ 1 (/ x K)))))

(FPCore (x)
  :name "predatorPrey"
  :cite (darulova-kuncak-2014 solovyev-et-al-2015)
  :fpbench-domain science
  :precision binary64
  :pre (<= 0.1 x 0.3)
  (let ([r 4.0] [K 1.11])
    (/ (* (* r x) x) (+ 1 (* (/ x K) (/ x K))))))

(FPCore (v)
  :name "carbonGas"
  :cite (darulova-kuncak-2014 solovyev-et-al-2015)
  :fpbench-domain science
  :precision binary64
  :pre (<= 0.1 v 0.5)
  (let ([p 3.5e7] [a 0.401] [b 42.7e-6] [t 300] [n 1000] [k 1.3806503e-23])
    (- (* (+ p (* (* a (/ n v)) (/ n v))) (- v (* n b))) (* (* k n) t))))


(FPCore (x)
  :name "sqroot"
  :cite (darulova-kuncak-2014 solovyev-et-al-2015)
  :fpbench-domain mathematics
  :pre (<= 0 x 1)
  (- (+ (- (+ 1.0 (* 0.5 x)) (* (* 0.125 x) x))
        (* (* (* 0.0625 x) x) x)) (* (* (* (* 0.0390625 x) x) x) x)))
